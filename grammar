Context Free Grammar
--------------------

PROGRAM -> STMT_LIST FUNCTION_LIST

FUNCTION_LIST -> FUNC_DECL FUNCTION_LIST | FUNC_DECL

CONST_DECL_LIST -> CONST_DECL CONST_DECL_LIST | e

CONST_DECL -> ‘const’ DATA_TYPE VAR_NAME ASSIGN_OPER VALUE ‘;’

VAR_DECL -> DATA_TYPE VAR_NAME ASSIGN_OPER VALUE
		| DATA_TYPE VAR_NAME

ASSIGN_EXPR -> VAR_NAME ASSIGN_OPER OPERATION ‘;’
		| VAR_NAME ASSIGN_OPER OPERAND ‘;’
		| VAR_NAME ASSIGN_OPER ARRAY_ASSIGN

ARRAY_ASSIGN -> ‘{’ ARRAY_ELEMENT ‘};’

ARRAY_ELEMENT -> ARRAY_ELEMENT ‘,’ OPERAND | OPERAND | e

ASSIGN_OPER -> ‘=’

IF_ELSE -> ‘if’ COND_STMT ‘{’ STMT_LIST ‘} else’ IF_ELSE
		| ‘if’ COND_STMT ‘{’ STMT_LIST ‘} else’ STMT_LIST
		| ‘if’ COND_STMT ‘{’ STMT_LIST ‘}’

COND_STMT -> ‘(’ COND_LIST ‘)’

COND_LIST -> COND_EXPR
		| COND_STMT
		| COND_EXPR LOGIC_OPER COND_LIST
		| COND_STMT LOGIC_OPER COND_LIST
		| ‘!’ COND_EXPR
		| ‘!’ COND_STMT
		| ‘!’ COND_EXPR LOGIC_OPER COND_LIST
		| ‘!’ COND_STMT LOGIC_OPER COND_LIST

LOGIC_OPER -> ‘and’ | ‘or’

COND_EXPR -> OPERAND COND_OPER OPERAND | OPERAND

COND_OPER -> ‘<’ | ‘<=’ | ‘==’ | ‘>’ | ‘>=’ | ‘!=’

STMT_LIST -> STATEMENT STMT_LIST | e
		
STATEMENT ->  VAR_DECL
		| ASSIGN_EXPR
		| IF_ELSE
		| FOR_LOOP
		| WHILE_LOOP
		| DO_WHILE
		| FUNC_CALL
		| RETURN_STMT
		| e

FOR_LOOP -> ‘for( ’ ASSIGN_EXPR ‘;’ COND_LIST ‘;’ VAR_NAME ASSIGN_OPER OPERATION ‘){’ STMT_LIST ‘}’

WHILE_LOOP -> ‘while’ COND_STMT ‘{’ STMT_LIST ‘}’

DO_WHILE -> ‘do {’ STMT_LIST ‘} while’ COND_STMT ‘;’

FUNC_DECL -> RET_TYPE FUNC_NAME ‘(‘ FORMAL_PARAM_LIST ‘){’ STMT_LIST ‘}’

FUNC_CALL -> FUNC_NAME ‘(’ ACTUAL_PARAM_LIST ‘);’

RET_TYPE -> DATA_TYPE | ‘void’

FUNC_NAME -> LETTER | LETTER FUNC_NAME

FORMAL_PARAM_LIST -> FORMAL_PARAM ‘,’ FORMAL_PARAM_LIST | FORMAL_PARAM

FORMAL_PARAM -> DATA_TYPE VAR_NAME | e

RETURN_STMT -> ‘return’ OPERATION ‘;’ | ‘return’ OPERAND ‘;’

ACTUAL_PARAM_LIST -> ACTUAL_PARAM ‘,’ ACTUAL_PARAM_LIST | ACTUAL_PARAM

ACTUAL_PARAM -> OPERATION | OPERAND | e

VAR_NAME -> LETTER | LETTER VAR_NAME

OPERATION -> OPERAND OPERATOR OPERATION 
| ‘(‘ OPERATION ‘)’ OPERATOR OPERATION

OPERAND -> VALUE
   | VAR_NAME
   | ARR_VAR_NAME
   | STRING
   | FUNC_CALL
   | CHARACTER

ARR_VAR_NAME -> VAR_NAME ‘[’ INTEGER ‘]’

DATA_TYPE -> PRIM_DATA_TYPE | PRIM_DATA_TYPE ‘[]’

PRIM_DATA_TYPE -> ‘int’ | ‘float’ | ‘string’ | ‘char’ 


Regular Expressions
-------------------

LETTER = ( 'a'..'z' + ‘_’ )

DIGIT = ( ‘0’..‘9’ )

OPERATOR = ( ‘+’ + ‘-‘ + ‘*’ + ‘/’ + ‘%’)

INTEGER = (‘+’ + ‘-‘ + e ) DIGIT+

FLOAT = (‘+’ + ‘-‘ + e ) DIGIT+ ( ( ‘.’ DIGIT+) + e ) ( (‘E’ (‘+’ + ‘-‘ + 
    e ) DIGIT+) + e)

STRING = ‘ ” ’ any unicode character(s) ‘ “ ’

CHARACTER = ‘ ‘ ’ any unicode character ‘ ‘ ’
